什么是继承？
    维基百科：是面向对象软件技术当中的一个概念。如果一个类别B 继承自 另一个类别A，就把这个B称为 A的子类
             而把A称为 B的父类。继承可以使得子类具有父类的各种属性和方法，而不需要再次编写相同的代码。
             在子类继承父类的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类的原有属性和方法，使
             其获得与类的不同的功能。另外，为子类追加新的属性和方法也是常见的做法。
    概括：在开发过程中把一些共有的东西抽出来成为一个对象，定义共有的方法和属性，然后在其上扩展自己私有的

JS中继承实现方式
    1.原生js实现
    2.ES6的实现方式（一种语法糖，原理和原生的一样）

原生js实现
    假设有个公共的类叫Person，有sex，age属性
    有两个子类分别为person1，person2，属性name，career
    具体实现如下：

    function Person (sex, age) {
        this.sex = sex
        this.age = age
    }

    function person1 (sex, age, name, career) {
        Person.call(this, sex, age)
        this.name = name
        this.career = career
    }

    function person2 (sex, age, name, career) {
        Person.call(this, sex, age)
        this.name = name
        this.career = career
    }

    person1.prototype = Person
    person2.prototype = Person

    let person1Obj = new person1 ('male', 20, 'bob', 'student')
    let person2Obj = new person2 ('female', 25, 'alice', 'doctor')
    console.log(person1Obj)
    console.log(person2Obj)

    分析：通过构造函数和this机制来实现

    补充：如果有些公共的东西是定值，则把该属性（可以是方法）添加到原型链上
    Person.prototype.type = 'animal'
    并把person1,person2 的 prototype指向Person.prototype
    同时把person1.prototype.constructor指向person1，因为在改变person1.prototype的时候也改变了constructor，但这个不应该变
    person2同理

    这样person1Obj,person2Obj就都会有type这个属性，且都为animal

    function Person (sex, age) {
        this.sex = sex
        this.age = age
    }

    function person1 (sex, age, name, career) {
        Person.call(this, sex, age)
        this.name = name
        this.career = career
    }

    function person2 (sex, age, name, career) {
        Person.call(this, sex, age)
        this.name = name
        this.career = career
    }

    Person.prototype.type = 'animal'

    person1.prototype = Person.prototype
    person2.prototype = Person.prototype
    person1.prototype.constructor = person1
    person2.prototype.constructor = person2

    let person1Obj = new person1 ('male', 20, 'bob', 'student')
    let person2Obj = new person2 ('female', 25, 'alice', 'doctor')

    console.log(person1Obj)
    console.log(person2Obj)

ES6的实现方式
    切记，ES6的实现方式不过是一种语法糖，具体的原理还是通过原型来实现

    class Person {
        constructor (sex, age) {
            this.sex = sex
            this.age = age
        }
    }

    class person1 extends Person{
        constructor (sex, age, name, career) {
            super(sex, age)
            this.name = name
            this.career = career
        }
    }

    class person2 extends Person{
        constructor (sex, age, name, career) {
            super(sex, age)
            this.name = name
            this.career = career
        }
    }

    let person1Obj = new person1('male', 20, 'bob', 'student')
    let person2Obj = new person2('female', 25, 'alice', 'doctor')

    console.log(person1Obj)
    console.log(person2Obj)

    加上共有的属性type
    class Person {
        constructor (sex, age) {
            this.sex = sex
            this.age = age
        }
        type () {
            return 'animal'
        }
    }

    class person1 extends Person {
        constructor (sex, age, name, career) {
            super(sex, age) // 一定要先写super
            this.name = name
            this.career = career
        }
    }

    class person2 extends Person {
        constructor (sex, age, name, career) {
            super(sex, age)
            this.name = name
            this.career = career
        }
    }

    let person1Obj = new person1('male', 20, 'bob', 'student')
    let person2Obj = new person2('female', 25, 'alice', 'doctor')
    console.log(person1Obj)
    console.log(person2Obj)
    console.log(person1Obj.type())
    console.log(person2Obj.type())

    注：通过两种方式对比，es6只是语法糖，写起来更加方便，直观